# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mStyK71ELy_MpOOOVdkNqsdMgxz_4kc9

Setting Time Range and Tickers
"""

import numpy as np
import pandas as pd
import datetime as dt
import yfinance as yf

years = 15

endDate = dt.datetime.now()
startDate = endDate - dt.timedelta(days=365*years)

tickers = ['SPY', 'BND', 'GLD', 'QQQ', 'VTI']

"""Downloading Close Prices"""

close_df = pd.DataFrame()
for ticker in tickers:
    data = yf.download(ticker, start=startDate, end=endDate)
    close_df[ticker] = data['Close']

print(close_df)

"""Calculating Daily Log Returns and Dropping NAs"""

log_returns = np.log(close_df / close_df.shift(1))
log_returns = log_returns.dropna()
print(log_returns)

"""Creating an Equally Weighted Portfolio"""

portfolio_value = 1000000
weights = np.array([1/len(tickers)]*len(tickers))
print(weights)

"""Calculating Historical Portfolio Returns"""

historical_returns = (log_returns * weights).sum(axis =1)
print(historical_returns)

"""Finding X-Day Historical Returns"""

days = 50

range_returns = historical_returns.rolling(window = days).sum()
range_returns = range_returns.dropna()
print(range_returns)

"""Calculating VaR Using the Historical Method"""

confidence_interval = 0.99

VaR = -np.percentile(range_returns, 100 - (confidence_interval * 100))*portfolio_value
print(VaR)

"""Plotting the Results of the Historical Returns"""

from matplotlib import pyplot as plt
return_window = days
range_returns = historical_returns.rolling(window=return_window).sum()
range_returns = range_returns.dropna()

range_returns_dollar = range_returns * portfolio_value

plt.hist(range_returns_dollar.dropna(), bins=50, density=True)
plt.xlabel(f'{return_window}-Day Portfolio Return (Dollar Value)')
plt.ylabel('Frequency')
plt.title(f'Distribution of Portfolio {return_window}-Day Returns (Dollar Value)')
plt.axvline(-VaR, color='r', linestyle='dashed', linewidth=2, label=f'VaR at {confidence_interval:.0%} confidence level')
plt.legend()
plt.show()